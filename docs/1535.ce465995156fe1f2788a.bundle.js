"use strict";(self.webpackChunkKuiClientTemplate=self.webpackChunkKuiClientTemplate||[]).push([[1535,2154],{42154:(e,t,o)=>{o.r(t),o.d(t,{default:()=>i});var r=o(67294);const s=r.lazy((()=>Promise.all([o.e(5608),o.e(3676),o.e(7316),o.e(3749),o.e(2683),o.e(1346),o.e(285),o.e(3973),o.e(4680),o.e(1947),o.e(236),o.e(237),o.e(7809),o.e(3546),o.e(2845),o.e(347)]).then(o.bind(o,52845)).then((e=>({default:e.Alert}))))),n=r.lazy((()=>Promise.all([o.e(5608),o.e(3676),o.e(7316),o.e(3749),o.e(2683),o.e(1346),o.e(285),o.e(3973),o.e(4680),o.e(1947),o.e(236),o.e(237),o.e(7809),o.e(3546),o.e(2845),o.e(347)]).then(o.bind(o,52845)).then((e=>({default:e.AlertActionCloseButton})))));class l extends r.PureComponent{constructor(e){super(e),this._onClose=this.onClose.bind(this),this.state=l.getDerivedStateFromProps(e)}static getDerivedStateFromProps(e,t){return t&&e===t.props?t:{props:e,isClosed:!1}}onClose(){this.props.onCloseButtonClick&&this.props.onCloseButtonClick(),this.setState({isClosed:!0})}render(){return this.state.isClosed?r.createElement(r.Fragment,null):r.createElement(s,{id:this.props.id||"",className:"kui--toolbar-alert "+(this.props.className||""),"data-type":this.props.alert.type,title:this.props.alert.title,actionClose:!this.props.hideCloseButton&&r.createElement(n,{onClose:this._onClose}),timeout:this.props.timeout,onTimeout:this._onClose,isInline:!this.props.isGlobal,variant:"error"===this.props.alert.type?"danger":this.props.alert.type},r.createElement(r.Fragment,null,this.props.alert.body||"",this.props.children))}}function i(e){return r.createElement(r.Suspense,{fallback:r.createElement("div",null)},r.createElement(l,Object.assign({},e)))}},61535:(e,t,o)=>{o.r(t),o.d(t,{default:()=>a});var r=o(18495),s=o(42154),n=function(e,t,o,r){return new(o||(o=Promise))((function(s,n){function l(e){try{a(r.next(e))}catch(e){n(e)}}function i(e){try{a(r.throw(e))}catch(e){n(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(l,i)}a((r=r.apply(e,t||[])).next())}))};const l={command:"alert",strict:"alert",example:"alert [<alert type>] [<alert title text>] [--body <alert body text>]",docs:"Alert",required:[{name:"type",docs:"info, success, warning, or error"},{name:"title",docs:"alert title text"}],optional:[{name:"--body",docs:"alert body text"}]};function i(e){const t=e.argvNoOptions,o=e.parsedOptions,n=t[1],l=t[2];if((0,r.isSupportedToolbarTextType)(n))return{react:(0,s.default)({alert:{type:n,title:l,body:o.body},className:"kui--terminal-alert"})};throw new r.UsageError("alert type must be: 'info', 'success', 'warning' or 'error'.")}const a=e=>n(void 0,void 0,void 0,(function*(){e.listen("/alert",i,{usage:l})}))}}]);