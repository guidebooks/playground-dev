"use strict";(self.webpackChunkKuiClientTemplate=self.webpackChunkKuiClientTemplate||[]).push([[7885],{92659:(e,n,s)=>{s.r(n),s.d(n,{default:()=>o});const o='# Executable Code Blocks\n\nTo make a code block executable, make sure to specify a language of\neither `bash`, `sh`, or `shell`.\n\nInside a code blocks, you may define metadata, such as an identifier\nwhen linking code blocks into [Progress Step\nLists](#progress-step-lists).\n\n```bashy\n---\nid: my-first-command\n---\necho hello\n```\n\n\x3c!-- Hello viewers of the source to this notebook! Note that we have\nused a language of `bashy` here, to prevent Kui from rendering this as\nan executable code block. --\x3e\n\nWhen given one of those executable languages (e.g. if your code block\nstarts with \\`\\`\\`bash), Kui will display this as a _executable_ code\nblock with the given sample output. Here is that same text, but now\nrepeated as a normal code block:\n\n```bash\n---\nid: my-first-command\n---\necho hello\n```\n\nAnd another example:\n\n```bash\n---\nid: my-second-command\nresponse: world\n---\necho world\n```\n\nThe `id` part is used to help you define a "progress stepper"\nlist. When a referenced code block is executed, the progress stepper\nwill update to show the user the status of that code blocks\'\nexecution.\n\n## Progress Step Lists\n\nWhen using this syntax for lists:\n\n```\n- **[Step 1](#kui-link-my-first-command)** *blank* This should echo hello.\n- **[Step 2](#kui-link-my-second-command)** *blank* This should echo world.\n```\n\nyou will get a progress step list like this:\n\n- **[Step 1](#kui-link-my-first-command)** _blank_ This should echo hello.\n- **[Step 2](#kui-link-my-second-command)** _blank_ This should echo world.\n\nNote the use of the `my-first-command` and `my-second-command`\ncross-reference identifiers.\n'}}]);